float map(vec3 pos) {
  float cell = 3.;
  pos = mod(pos, cell) - cell * .5;
  return length(pos) - 1.;
}

vec3 getNormal (vec3 pos) {
  vec2 e = vec2(1.0, -1.0) * 0.5773 * 0.0005;
  return normalize(e.xyy * map(pos + e.xyy) + 
                   e.yyx * map(pos + e.yyx) + 
                   e.yxy * map(pos + e.yxy) + 
                   e.xxx * map(pos + e.xxx));
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  vec2 uv = (fragCoord - .5*iResolution.xy)
    / iResolution.y;
  vec3 eye = vec3(0, 0, -2);
  vec3 ray = normalize(vec3(uv, 1.));
  float shade = 0.;
  for (float index = 100.; index > 0.; --index) {
    float dist = map(eye);
    if (dist < 0.001) {
      shade = index / 100.;
      break;
    }
    eye += ray * dist;
  }
  vec3 normal = getNormal(eye) * .5 + .5;
  fragColor = vec4(normal * shade, 1);
}

// Raymarching Example using the work of Inigo Quilez
// https://www.shadertoy.com/view/tsXXWn
