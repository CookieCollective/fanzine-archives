1. The Seal 
	for (float i = 0.; i<ITER; i++)
            {
                float d = SDF(p);
                if (d<0.01)
                {
                    hit = true;
                    shad = i/ITER;
                    break;
                }
                d *= 0.8 + dither*0.1;
                p += d*rd;
            }

            if (hit)
            {
                vec3 n = get_norm(p);
                float fre = pow(clamp(1.-dot(n, -rd), 0., 1.),3.);
                vec3 keypos = vec3(-8., 10., -10.);
                vec3 rimpos = vec3(5., -2., 5.);
                vec3 specpos = vec3(-3.,6., -3.);
                vec3 global_lighting = mix(vec3(0.2,0.1,0.), vec3(0.8, 0.8, 0.5),dirlight(n,keypos));
                vec3 rim_lighting = vec3(0.1, 0.5, 0.8)*dirlight(n,rimpos);

                if (mat == 0)
                {
                    vec3 albedo = vec3(rand(t_id+2.), 1., rand(t_id+4.))*0.5;
                    col = albedo;
                    col += global_lighting;
                    col += rim_lighting;
                    col += spec_light(rd,n,specpos, 2.);
                    col /= 3.;
                }
                if (mat == 1)
                {vec3 albedo = vec3(0.8, 0.8, 1.);
                 col = albedo;
                 col += global_lighting;
                 col += rim_lighting;
                 col /= 2.;
                 col += fre;
                }
                if (mat == 2)
                {
                    vec3 albedo = vec3(.8, 0.7, 0.);
                    col = albedo;
                    col += global_lighting;
                    col += rim_lighting;
                    col += spec_light(rd,n,keypos, 16.)*vec3(1.,0.6,0.5);
                    col /= 3.;
                    col += fre;
                }
                if (mat == 3) col = global_lighting;
            }


2. Let the sunshine
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;
	uv.x *= iResolution.x/iResolution.y;
    
    vec3 ro = vec3(0.,-1.3, -5.); 
    vec3 p = ro;
    vec3 target = vec3(0.);
    vec3 rd = getcam(ro, target, uv, 0.8);
    
    vec3 translucentColor = vec3(0.1, 0.2, length(uv*0.5));
    // trace ray
    bool hit;
    float dist;
    vec3 hitPos = traceInside(ro, rd, hit, dist);

    vec3 rgb = vec3(0.0);
    if(hit) 
    {
		// exponential fall-off:
		rgb = exp(-dist*dist*translucentColor);
     } 
      else 
      {
        rgb = vec3(0.94,1.,1.);
     }


    // Output to screen
    fragColor = vec4(pow(rgb, vec3(0.45)),1.0);
}


3. Mandala Elevator
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 uv = 2.*(fragCoord.xy / iResolution.xy)-1.;
    uv.x *= iResolution.x/iResolution.y;
    
    vec3 p = vec3 (-.001,iTime,-3.);
    vec3 dir = normalize(vec3(uv,1.));
    
    float shad = 0.;
    vec3 color = vec3 (0.);
    
    for (int i=0; i<100;i++)
    {
        float d = elevator(p);
        if (d<0.01)
        {
            shad = float(i)/80.;
           break;
        }
        else shad = .0;
        p+=d*0.2*dir;
    }
    color = vec3(shad)*vec3(0.8,p.z,abs(p.x*0.5));
	fragColor = vec4(color,1.0);
}